// wip!!

min1:{[x]
$.[atom? x;@r x]
$.[list? x;$.[#x=0;@r ()];tmp:x 0
  N[#x;@a atom? x _n;$.[x _n<tmp;tmp:x _n]]
  @r tmp]
$.[dict? x;$.[#x=0;@r ()];ks:keys x;tmp:x ks 0
  N[#x;@a atom? x ks _n;$.[x ks _n<tmp;tmp:x ks _n]]
  @r tmp]}

sum1:{[x]
$.[atom? x;@r x]
$.[list? x;$.[#x=0;@r ()];tmp:0
  N[#x;@a atom? x _n;tmp:tmp+x _n]
  @r tmp]
$.[dict? x;$.[#x=0;@r ()];ks:keys x;tmp:0
  N[#x;@a atom? x ks _n;tmp:tmp+x ks _n]
  @r tmp]}

enlist:{[x],x}
delta:{[x]$.[#x<=1;@r x];t:alloc(#x-1);N[#t;t[_n]:x[_n+1]-x[_n]];t}

// build a list of n elements with each elem being s
repeat:{[s;n]res:alloc n;N[n;res[_n]:s];res}

replicate:{[f;n]N[#(l:alloc n);l[_n]:f[]];l}
map:{[f;xs]l:alloc(#xs);N[#l;l[_n]:f[xs[_n]]];l}
filter:{[f;xs]l:();N[#xs;k:xs[_n];$.[f[k];l:l,k]];l}
// f(acc,x) -> acc
foldl:{[f;init;xs]acc:init;N[#xs;acc:f[acc;xs[_n]]];acc}
scanl:{[f;init;xs]out:,init;acc:init;N[#xs;acc:f[acc;xs[_n]];out:out,acc];out}
zip:{[xs;ys]out:();N[min1(#xs;#ys);out:out,enlist(xs[_n];ys[_n])];out}

in:{[e;list]N[#list;$.[list _n=e;@r true]];false}
find:{[e;list]N[#list;$.[list _n=e;@r _n]];-1}

first:{[list]list 0}
last:{[list]list[#list-1]}

take_:{[n;list]
@a list? list
list iota n
}

range_:{[st;end]
  @a st<=end
  $.[st=end;@r ()]
  tmp:,st
  N[floor(end-st-1);tmp:tmp,last tmp+1]
  tmp
}

drop_:{[n;list]
@a list? list
list range_[n;#list]
}
