// wip!!

PI: 3.141592653589793;

EPS64: 2.220446049250313e-16;
absf: {[r] $[r<0.0; -r; r]};

cadd: {[a;b] (a[0]+b[0]; a[1]+b[1])};
csub: {[a;b] (a[0]-b[0]; a[1]-b[1])};
cmul: {[a;b] (a[0]*b[0]-a[1]*b[1]; a[0]*b[1]+a[1]*b[0])};
conj: {[z] (z[0]; -z[1])};

bitlen: {[n]
  l:0; m:1;
  W[m<n; m:m*2; l:l+1;];
  l
};

bitrev: {[i; bits]
  r:0; j:i; cnt:0;
  W[cnt<bits;
    r: r*2 + j%2;
    j: floor(j/2);
    cnt: cnt+1;
  ];
  r
};

to_complex: {[x]
  n: count x;
  y: alloc[n;];
  N[n; y[_n]:(x[_n]; 0.0);];
  y
};

bitrev_copy: {[a]
  n: count a;
  y: alloc[n;];
  b: bitlen n;
  N[n; i:_n; j: bitrev[i; b;]; y[j]: a[i];];
  y
};

fft_radix2: {[x]
  n: count x;
  a: bitrev_copy[to_complex x;];

  len: 2;
  W[len<=n;
    step_angle: -2.0*PI/len;
    w_step: (cos step_angle; sin step_angle);
    b: 0;
    W[b<n;
      j: 0;
      w: (1.0; 0.0);
      half: floor(len/2);
      W[j<half;
        u: a[b+j];
        v: cmul[a[b+j+half]; w;];
        a[b+j]: cadd[u; v;];
        a[b+j+half]: csub[u; v;];
        w: cmul[w; w_step;];
        j: j+1;
      ];
      b: b+len;
    ];
    len: len*2;
  ];
  a
};

ifft_radix2: {[spec]
  n: count spec;
  a: alloc[n;];
  N[n; a[_n]: conj spec[_n];];
  a: fft_radix2 a;
  invn: 1.0/n;
  y: alloc[n;];
  N[n;
    z: conj a[_n];
    y[_n]: (z[0]*invn; z[1]*invn);
  ];
  y
};

max_abs: {[x]
  n: count x; m: 0.0;
  N[n; v: absf x[_n]; m: $[v>m; v; m];];
  m
};

clean_spec: {[spec; x]
  n: count spec;
  mx: max_abs[x;];
  eps: 32.0 * EPS64 * n * $[mx>0.0; mx; 1.0];
  N[n;
    re: spec[_n][0];
    im: spec[_n][1];
    re: $[absf re < eps; 0.0; re];
    im: $[absf im < eps; 0.0; im];
    spec[_n]: (re; im);
  ];
  spec
};

fft: {[x]
  spec: fft_radix2 x;
  clean_spec[spec; x;]
};
